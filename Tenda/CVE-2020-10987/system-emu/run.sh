#!/bin/bash

# 启动可能需要的服务
sed -i 's/^#\?\s*Port\s\+22/Port 55/' /etc/ssh/sshd_config
PORT=55
/etc/init.d/ssh start
nohup python3 -m http.server 8000 1>&/dev/null &

### --- 核心网络配置：创建静态模拟网络 --- ###

echo "正在创建静态模拟网络 10.10.2.0/24..."

# 1. 创建网桥 br0，作为我们的虚拟交换机
brctl addbr br0

# 2. 为网桥 br0 (模拟的主机网卡) 配置固定的IP地址
ifconfig br0 10.10.2.1 netmask 255.255.255.0 up
echo "主机模拟网卡(br0) IP地址设置为: 10.10.2.1"

# 3. 创建 TAP 接口，作为QEMU虚拟机的虚拟网卡
tunctl -t tap0
ifconfig tap0 up

# 4. 将 TAP 接口连接到网桥上
brctl addif br0 tap0

echo "网络配置完毕，QEMU虚拟机将连接到br0。"

### --- 网络配置结束 --- ###


# 进入 qemu 镜像目录
cd /root/images

# 定义主机和虚拟机的IP，方便后续使用
HOST_IP="10.10.2.1"
VM_IP="10.10.2.100"

echo "正在启动QEMU虚拟机，并将其IP设置为: $VM_IP"

/usr/bin/expect<<EOF
set timeout 10000
# QEMU使用tap0网卡，兼容性好的-net nic模式会让VM内设备名为eth0
spawn qemu-system-arm -M vexpress-a9 -kernel vmlinuz-3.2.0-4-vexpress -initrd initrd.img-3.2.0-4-vexpress -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 -append "root=/dev/mmcblk0p2" -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic

# 登录QEMU虚拟机
expect "debian-armhf login:"
send "root\r"
expect "Password:"
send "root\r"

# 为QEMU虚拟机配置固定的IP地址
expect "root@debian-armhf:~# "
send "ifconfig eth0 $VM_IP netmask 255.255.255.0 up\r"

# 检查一下到主机的网络连通性
expect "root@debian-armhf:~# "
send "ping -c 3 $HOST_IP\r"

# 后续的自动化操作现在可以正常执行了
expect "root@debian-armhf:~# "
send "scp -P $PORT root@$HOST_IP:/root/squashfs-root.tar.gz /root/squashfs-root.tar.gz\r"
expect {
    "(yes/no)? " { send "yes\r"; exp_continue }
    "password: " { send "root\r" }
}

expect "root@debian-armhf:~# "
send "tar xzf squashfs-root.tar.gz && rm squashfs-root.tar.gz\r"
expect "root@debian-armhf:~# "
send "mount -o bind /dev ./squashfs-root/dev && mount -t proc /proc ./squashfs-root/proc\r"

expect "root@debian-armhf:~# "
send "scp -P $PORT -r root@$HOST_IP:/root/tools /root/squashfs-root/tools\r"
expect {
    "(yes/no)? " { send "yes\r"; exp_continue }
    "password: " { send "root\r" }
}

expect "root@debian-armhf:~# "
send "chroot squashfs-root/ sh\r"
expect "# "
send "chmod +x tools/patch.sh && /bin/sh tools/patch.sh\r"
expect "# "
send "brctl addbr br0 && ifconfig br0 $VM_IP/24 up\r"
expect "# "
send "/bin/httpd\r"

expect eof
EOF